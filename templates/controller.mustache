'use strict';

{{#api}}
const {{modelName}} = require('App/Model/{{modelName}}');
{{/api}}
{{#json}}
const {{modelName}} = require('App/Model/{{modelName}}');
{{/json}}
{{#attributes}}
const attributes = [{{{attributes}}}];
{{/attributes}}

class {{controllerName}} {

{{#resource}}
  * index(request, response) {
    {{#api}}
    const {{pluralCamelCase}} = yield {{modelName}}.with({{{with}}}).fetch();

    response.send({{pluralCamelCase}});
    {{/api}}
    {{#json}}
    const {{pluralCamelCase}} = yield {{modelName}}.with({{{with}}}).fetch();

    response.jsonApi('{{modelName}}', {{pluralCamelCase}});
    {{/json}}
  }

  * store(request, response) {
    {{#api}}
    const input = request.only({{{inputOnly}}});
    const {{singularCamelCase}} = yield {{modelName}}.create(input);

    response.send({{singularCamelCase}});
    {{/api}}
    {{#json}}
    const input = request.jsonApi.getAttributesSnakeCase(attributes);
    {{#belongsTo}}
    const {{.name}} = request.all().data.relationships.{{.name}}.data.id;
    {{/belongsTo}}
    const foreignKeys = {
      {{#foreignKeys}}
      {{.}},
      {{/foreignKeys}}
    };
    const {{singularCamelCase}} = yield {{modelName}}.create(Object.assign({}, input, foreignKeys));

    response.jsonApi('{{modelName}}', {{singularCamelCase}});
    {{/json}}
  }

  * show(request, response) {
    {{#api}}
    const id = request.param('id');
    const {{singularCamelCase}} = yield {{modelName}}.with({{{with}}}).where({ id }).firstOrFail();

    response.send({{singularCamelCase}});
    {{/api}}
    {{#json}}
    const id = request.param('id');
    const {{singularCamelCase}} = yield {{modelName}}.with({{{with}}}).where({ id }).firstOrFail();

    response.jsonApi('{{modelName}}', {{singularCamelCase}});
    {{/json}}
  }

  * update(request, response) {
    {{#api}}
    const input = request.only({{{inputOnly}}});
    const id = request.param('id');

    const {{singularCamelCase}} = yield {{modelName}}.with({{{with}}}).where({ id }).firstOrFail();
    yield {{singularCamelCase}}.update(input);

    response.send({{singularCamelCase}});
    {{/api}}
    {{#json}}
    const id = request.param('id');
    request.jsonApi.assertId(id);

    const input = request.jsonApi.getAttributesSnakeCase(attributes);
    {{#belongsTo}}
    const {{.name}} = request.all().data.relationships.{{.name}}.data.id;
    {{/belongsTo}}
    const foreignKeys = {
      {{#foreignKeys}}
      {{.}},
      {{/foreignKeys}}
    };

    const {{singularCamelCase}} = yield {{modelName}}.with({{{with}}}).where({ id }).firstOrFail();
    yield {{singularCamelCase}}.update(Object.assign({}, input, foreignKeys));

    response.send({{singularCamelCase}});
    {{/json}}
  }

  * destroy(request, response) {
    {{#api}}
    const id = request.param('id');
    const {{singularCamelCase}} = yield {{modelName}}.query().where({ id }).firstOrFail();
    yield {{singularCamelCase}}.delete();

    response.status(204).send();
    {{/api}}
    {{#json}}
    const id = request.param('id');

    const {{singularCamelCase}} = yield {{modelName}}.query().where({ id }).firstOrFail();
    yield {{singularCamelCase}}.delete();

    response.status(204).send();
    {{/json}}
  }
{{/resource}}

}

module.exports = {{controllerName}};
